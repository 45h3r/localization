
function [botEst, botPosition, lost] = sim_localise(map,tol,unique_clusters,debug)
% ======================================================================
% sim_localise
% By Asher Winterson & Aidan Scannell
%
% Inputs
% ======
% map - Map input in vector form
% tol - particle cluster tolerance in cm or degree
% unique_clusters - minimum number of clusters for convergence
%
% Outputs
% ========
% botEst - Estimated bot position after convergence
% botPosition - True bot position at every iteration
% lost - true if max number of iterations is
%        reached indicated lost robot, otherwise false
% ========================================================================


%map=[0,0;60,0;60,45;45,45;45,59;106,59;106,105;0,105];
%map=[0,0;50,0;50,50;0,50];
%map = [-30,0;-30,40;30,40;30,60;5,60;45,90;85,60;60,60;60,40;120,40;120,60;95,60;135,90;175,60;150,60;150,40;210,40;210,60;185,60;225,90;265,60;240,60;240,40;300,40;300,0]; %repeated features
%map = [0,0;60,0;60,50;100,50;70,0;110,0;150,80;30,80;30,40;0,80]; %long map

%Initialize Variables
botSim = BotSim(map);
modifiedMap = map;
mapArea = polyarea(map(:,1),map(:,2)); %Find area of map
path_div = 10; % Define number of divisions the max distance is split into
num = round(mapArea*0.05); %calculate particle quantity as a function of map area
% num = 300; % number of particles
wallClearance = 10; % wall clearance of bot
numberScans = 20; % number of ultrasound scans
botSim.setScanConfig(botSim.generateScanConfig(numberScans));
weights = zeros(num,1);
d = zeros(numberScans,1);
particle_data = zeros(num,3);
lost = 0;
move_it = 1;
scan_max_ind = NaN;
steps = NaN;


%Noise as StdDev
sensor_noise = 1; %Constant
motion_noise = 0.001; %Proportional
turning_noise = 0.005; %Proportional
botSim.setSensorNoise(sensor_noise)
botSim.setTurningNoise(turning_noise)
botSim.setMotionNoise(motion_noise)

angle_interval_bot = (0:(360/numberScans):360-(360/numberScans))...
    .* (pi()/180); %create array of possible ultrasound angles

botSim.randomPose(wallClearance);  %Randomly plot bot - REMOVE FOR SUBMISSION

particles(num,1) = BotSim; %generate some random particles inside the map
for ii = 1:num
    particles(ii) = BotSim(modifiedMap);
    particles(ii).setScanConfig(botSim.generateScanConfig(numberScans))
    particles(ii).randomPose(wallClearance);
    particles(ii).setSensorNoise(sensor_noise)
    particles(ii).setTurningNoise(turning_noise)
    particles(ii).setMotionNoise(motion_noise)
end

%% Localisation code
maxNumOfIterations = 15;
n = 0;
converged =0;
while(converged == 0 && n < maxNumOfIterations) %particle filter loop
    %% Update and Score Particles
    n = n+1;
    botScan = botSim.ultraScan(); %botSim Scan
    
    for ii = 1 : num
        particle_scan = particles(ii).ultraScan; %particle scan
        for jj = 1 : numberScans
            d(jj) = sqrt(sum((particle_scan-botScan).^2)); %euclidean distance
            particle_scan = circshift(particle_scan,-1); %repeat at every orientation
        end
        [min_d, min_d_ind] = min(d); %find minimum euclidean distance (ED) to select correct orientation
        turn = (min_d_ind-1)*(2*pi()/numberScans); %set particle turning distance
        weights(ii) = 1/min_d; %use min ED of selected orientation to obtain weightings
        particles(ii).turn(turn) %Move particles to correct orientation
    end
    
    weights = weights/sum(weights); %normalize
    
    %% Resampling - Resampling Wheel
    
    %Initialize variables
    index = randi([1, num-1]);  %random number for initial starting point on wheel
    beta = 0;
    max_weight = max(weights);
    for ii = 1 : num
        beta = beta + rand(1)*2*max_weight; %aidan input description here!
        while beta > weights(index) %aidan input description here!
            beta = beta - weights(index); %aidan input description here!
            index = rem((index+1),num)+1; %aidan input description here!
            weights(ii) = weights(index);%aidan input description here!
            particle_to_copy = index; %aidan input description here!
            particles(ii).setBotPos(particles(particle_to_copy).getBotPos()); %aidan input description here!
            particles(ii).setBotAng(particles(particle_to_copy).getBotAng());%aidan input description here!
        end
    end
    
    %% Movement
    % Move to the furthest wall in steps of distance/path_div
    % Localisation occurs between every step
    
    if move_it < path_div && move_it ~= 1 % If not first iteration or less than path division
        turn = 0; % this is the step phase
        move = round((scan_max-2*wallClearance)/path_div); % move a fraction of the measured distance
    else
        scan_shift = botScan;
        % This loop ensures that a corner is not hit by averaging out groups of scans
        % the average scan then defines the angle in which it turns...
        % ...stops robot from protruding corners
        for ii = 1 : numberScans
            average_scan(ii) = (scan_shift(end) + scan_shift(1) + scan_shift(2) )/3; %find average
            scan_shift = circshift(scan_shift,-1); %circular shift instead of complex indexing
        end
        scan_max_ind_old = scan_max_ind;
        [~, scan_max_ind] = max(average_scan); %turn by selecting max average
        scan_max = botScan(scan_max_ind); %find distance to travel from real scan
        if scan_max_ind_old == scan_max_ind %check you're not traveling 180 degrees
            [scan_max, scan_max_ind] = max(botScan(botScan~=max(botScan))); % if so choose second largest distance
        end
        turn = angle_interval_bot(scan_max_ind);
        move = round((scan_max-wallClearance)/path_div);
        if turn >= pi() %choose shortest distance to turn
            turn = turn - 2*pi();
        end
    end
    move_it = move_it + 1;
    
    if min(botScan) < wallClearance %if within wall clearance begin evasive action
        disp('CLOSE TOO WALL!!')
        move_it = 1;
        [~, scan_min_ind] = min(botScan);
        if scan_min_ind < numberScans/2
            turn = angle_interval_bot(ceil(scan_min_ind+(numberScans/2)));
        elseif scan_min_ind == numberScans/2
            turn = pi/2;
        else
            turn = angle_interval_bot(ceil(scan_min_ind-(numberScans/2)));
        end
        move = wallClearance*1.5;
    end
    
    botSim.turn(turn); %Move Bot
    botSim.move(move); %Move Bot
    for ii =1:num
        particles(ii).turn(turn); %move particles
        particles(ii).move(move); %Move particles
        if particles(ii).insideMap == 0 % if inside map resample
            try
                y = randsample(1:num,num,true,weights); %resample
            catch
                weights(ii) = 0; % if fail set to 0
            end
            particles(ii).setBotPos(particles(y(ii)).getBotPos())
            particles(ii).setBotAng(particles(y(ii)).getBotAng())
        end
        particle_data(ii,1:2) = particles(ii).getBotPos();
        particle_data(ii,3) = mod(particles(ii).getBotAng(),2*pi);
    end
    
    
    %% Convergence
    %By using 'uniquetol' clusters of particles can be found by setting...
    %'tol' to an appropriate value to increase required accuracy before...
    %convergence.
    % 'DataScale' is required to scale the angle data to work with the
    % single tolerance level
    
    [C,iA] = uniquetol(particle_data(:,1:3),tol,'ByRows',true,'OutputAllIndices',true,'DataScale',[1,1,(180/pi)]);
    
    if size(C) <= unique_clusters %if the number of clusters is below a certain value = converged
        [~,weight_max_ind] = max(cellfun('size', iA, 1)); %find the max cell size
        botEst(1:3) = C(weight_max_ind,:); %retrieve estimate for bot position
        botEst(3) = mod(botEst(3), 2*pi); %retrieve estimate for bot position
        if debug == 1
            if botSim.debug()
                botSim.drawBot(10,'g');
                botPosition(1:2) = botSim.getBotPos();
                botPosition(3) = mod(botSim.getBotAng(), 2*pi());
            end
        end
        converged = 1;
    else
        botEst = NaN; %if not converged
    end
    
    
    
    %% Drawing
    if debug == 1
        if botSim.debug()
            hold off; %the drawMap() function will clear the drawing when hold is off
            botSim.drawMap(); %drawMap() turns hold back on again, so you can draw the bots
            for ii =1:num
                particles(ii).drawBot(weights(ii)); %draw particle with line length 3 and default color
            end
            botSim.drawBot(10,'g');
            botPosition(1:2) = botSim.getBotPos();
            scatter(botPosition(1,1),botPosition(1,2),1000,'g','marker','.');
            hold on
            drawnow;
        end
    else
        botPosition = NaN;
    end
end
if n == maxNumOfIterations
    if size(C) <= 1.5*unique_clusters
        [~,weight_max_ind] = max(cellfun('size', iA, 1)); %find the max cell size
        botEst(1:3) = C(weight_max_ind,:); %retrieve estimate for bot position
        botEst(3) = mod(botEst(3), 2*pi); %retrieve estimate for bot position
        lost = 0;
        disp('Potential Convergence - Returning Bot Position Estimate')
        if debug == 1
            if botSim.debug()
                botSim.drawBot(10,'g');
                botPosition(1:2) = botSim.getBotPos();
                botPosition(3) = mod(botSim.getBotAng(), 2*pi());
            end
        end
    else
        lost = 1; %if lost return 'lost' flag as true
        disp('HELP IM LOST!')
    end
end
clear tol;
end
